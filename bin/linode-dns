#!/bin/sh

set -eu

PROGRAM=linode-dns
LINODE_API_TOKEN="${LINODE_API_TOKEN:-}"
LINODE_DOMAIN=
LINODE_RECORD_NAME=
LINODE_RECORD_IPV4=
LINODE_RECORD_IPV6=
LINODE_RECORD_TTL=
QUIET=
JQ_EXEC="${JQ_EXEC:-jq}"
LINODE_API_EXEC="${LINODE_API_EXEC:-linode-api}"

usage() {
  cat <<EOF
Usage: $PROGRAM [OPTIONS] -k TOKEN -d DOMAIN [ -n NAME ] [ -4 IPV4 ] [ -6 IPV6 ]

Set A (IPv4), AAAA (IPv6) Linode domain records.

If -n is not specified or blank, then this will show/modify the root records.

If both -4 and -6 are not specified or blank, then this will just show the
current records.

If a single dot '.' is the argument for -4 / -6, then the respective records
are deleted.

Required arguments:
  -k, --token=TOKEN      Linode API token
  -d, --domain=DOMAIN    Linode domain
  -n, --name=NAME        Linode domain record name
  -4, --ipv4=IPV4        Set target IPv4 address
  -6, --ipv6=IPV6        Set target IPv6 address

Optional arguments:
  -t, --ttl=TTL          Time-to-live (TTL) in seconds
  -q, --quiet            Suppress output
  -h, --help             This help text

Enviroment variable mappings:
  LINODE_API_TOKEN       --token
  CURL_EXEC              Path to curl
  JQ_EXEC                Path to jq
  LINODE_API_EXEC        Path to linode-api

LIMITATION: This only works with A and AAAA records with a single target.
EOF
}

error() {
  [ $# -gt 0 ] && echo >&2 "$PROGRAM:" "$@"
  echo >&2 "Try '$PROGRAM --help' for more information."
  exit 1
}

jq() {
  command "$JQ_EXEC" "$@"
}

linode_api() {
  command "$LINODE_API_EXEC" "$@"
}

linode_api_with_check() {
  out -n "$1..."
  shift
  LINODE_API_OUTPUT="$(linode_api "$@")"
  LINODE_API_ERROR="$(echo "$LINODE_API_OUTPUT" |
    jq -r '.errors[0].reason // ""')"
  if [ -z "$LINODE_API_ERROR" ]; then
    out ok
  else
    out error
    out "Error: $LINODE_API_ERROR"
    exit 1
  fi
}

out() {
  [ -n "$QUIET" ] || echo "$@"
}

opts="$(
  getopt -n "$PROGRAM" -o k:d:n:4:6:t:h \
    -l token:,domain:,name:,ipv4:,ipv6:,ttl:,help -- "$@"
)" || error
# shellcheck disable=SC2086
eval set -- $opts

while [ $# -gt 0 ]; do
  ARG="$1"
  shift
  case "$ARG" in
  -k | --token)
    LINODE_API_TOKEN="$1"
    shift
    ;;
  -d | --domain)
    LINODE_DOMAIN="$1"
    shift
    ;;
  -n | --name)
    LINODE_RECORD_NAME="$1"
    shift
    ;;
  -4 | --ipv4)
    LINODE_RECORD_IPV4="$1"
    shift
    ;;
  -6 | --ipv6)
    LINODE_RECORD_IPV6="$1"
    shift
    ;;
  -t | --ttl)
    LINODE_RECORD_TTL="$1"
    shift
    ;;
  -q | --quiet)
    QUIET=1
    exit 0
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  --) ;;
  *)
    error "unexpected argument '$ARG'"
    ;;
  esac
done

[ -z "$LINODE_API_TOKEN" ] && error "missing TOKEN"
[ -z "$LINODE_DOMAIN" ] && error "missing DOMAIN"

which "$JQ_EXEC" >/dev/null || error "jq not installed"
which "$LINODE_API_EXEC" >/dev/null || error "linode-api not installed"

if [ -n "$LINODE_RECORD_NAME" ]; then
  LINODE_RECORD_FQDN="$LINODE_RECORD_NAME.$LINODE_DOMAIN"
else
  LINODE_RECORD_FQDN="$LINODE_DOMAIN"
fi

export LINODE_API_TOKEN

domain_filter="$(jq -cn --arg domain "$LINODE_DOMAIN" \
  "{ \"domain\": \$domain }")"

linode_api_with_check "Querying domain $LINODE_DOMAIN" \
  -f "$domain_filter" -p /domains

LINODE_DOMAIN_ID="$(echo "$LINODE_API_OUTPUT" | jq -r '.data[0].id // ""')"

# shellcheck disable=SC2016
records_filter="$(jq -cn --arg name "$LINODE_RECORD_NAME" '{
  "+and": [
    { "name": $name },
    {
      "+or": [
        { "type": "A" },
        { "type": "AAAA" }
      ]
    }
  ],
  "+order": "asc",
  "+order_by": "name"
}')"

linode_api_with_check "Querying domain records" \
  -f "$records_filter" -p "/domains/$LINODE_DOMAIN_ID/records"

out

echo "$LINODE_API_OUTPUT" | jq -c '.data[]' | {

  if [ -n "$LINODE_RECORD_TTL" ]; then
    ttl_js=", \"ttl_sec\": \$ttl | tonumber"
  else
    ttl_js=
  fi

  count=0

  while read -r record_json; do

    count=$((count + 1))
    id="$(echo "$record_json" | jq -r .id)"
    target="$(echo "$record_json" | jq -r .target)"
    type="$(echo "$record_json" | jq -r .type)"

    if [ "$type" = A ]; then
      new_target="$LINODE_RECORD_IPV4"
    else # AAAA
      new_target="$LINODE_RECORD_IPV6"
    fi

    out -n "$LINODE_RECORD_FQDN: $target ($type) "

    if [ -n "$new_target" ] && [ "$target" != "$new_target" ]; then
      if [ "$new_target" = . ]; then
        linode_api_with_check deleting \
          -m DELETE -p "/domains/$LINODE_DOMAIN_ID/records/$id"
      else
        body="$(
          jq -cn \
            --arg target "$new_target" \
            --arg ttl "$LINODE_RECORD_TTL" \
            "{
              \"target\": \$target $ttl_js
            }"
        )"
        out -n "-> $new_target "
        linode_api_with_check updating \
          -m PUT -b "$body" -p "/domains/$LINODE_DOMAIN_ID/records/$id"
        target="$new_target"
      fi
    else
      out
    fi

    if [ -n "$new_target" ] && [ "$target" = "$new_target" ]; then
      if [ "$type" = A ]; then
        LINODE_RECORD_IPV4=.
      else
        LINODE_RECORD_IPV6=.
      fi
    fi
  done

  for type in A AAAA; do
    if [ $type = A ]; then
      target="$LINODE_RECORD_IPV4"
    else
      target="$LINODE_RECORD_IPV6"
    fi

    if [ -n "$target" ] && [ $target != . ]; then
      count=$((count + 1))
      out -n "$LINODE_RECORD_FQDN: $target ($type) "
      body="$(
        jq -cn \
          --arg type "$type" \
          --arg name "$LINODE_RECORD_NAME" \
          --arg target "$target" \
          --arg ttl "$LINODE_RECORD_TTL" "{
            \"type\": \$type,
            \"name\": \$name,
            \"target\": \$target $ttl_js
          }"
      )"
      linode_api_with_check creating \
        -m POST -b "$body" -p "/domains/$LINODE_DOMAIN_ID/records"
    fi
  done

  if [ $count = 0 ]; then
    out "No records."
  fi
}

exit 0
