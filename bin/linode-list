#!/bin/sh

set -eu

PROGRAM=linode-list
LINODE_API_TOKEN="${LINODE_API_TOKEN:-}"
JQ_EXEC="${JQ_EXEC:-jq}"
LINODE_API_EXEC="${LINODE_API_EXEC:-linode-api}"

usage() {
  cat <<EOF
Usage: $PROGRAM [OPTIONS] -k TOKEN

Query linode instance.

Required arguments:
  -k, --token=TOKEN    Linode API token

Optional arguments:
  -h, --help           This help text

Enviroment variable mappings:
  LINODE_API_TOKEN     --token
  CURL_EXEC            Path to curl
  JQ_EXEC              Path to jq
  LINODE_API_EXEC      Path to linode-api

LIMITATION: this will only show up to 100 Linodes.
EOF
}

_error() {
  [ $# -gt 0 ] && echo >&2 "$PROGRAM:" "$@"
  echo >&2 "Try '$PROGRAM --help' for more information."
  exit 1
}

opts="$(
  getopt -n "$PROGRAM" -o k:h \
    -l token:,help -- "$@"
)" || _error
# shellcheck disable=SC2086
eval set -- $opts

while [ $# -gt 0 ]; do
  ARG="$1"
  shift
  case "$ARG" in
  -k | --token)
    LINODE_API_TOKEN="$1"
    shift
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  --) ;;
  *)
    _error "unexpected argument '$ARG'"
    ;;
  esac
done

[ -z "${LINODE_API_TOKEN:-}" ] && _error "missing TOKEN"

export LINODE_API_TOKEN

which "$JQ_EXEC" >/dev/null || _error "jq not installed"
which "$LINODE_API_EXEC" >/dev/null || _error "linode-api not installed"

tmp="$(mktemp)"

trap 'rm -f -- "$tmp"' EXIT

linode_filter='{"+order": "asc", "+order_by": "label"}'

"$LINODE_API_EXEC" -p /linode/instances -f "$linode_filter" >"$tmp"

LINODE_API_ERROR="$("$JQ_EXEC" -r '.errors[0].reason // ""' "$tmp")"

if [ -z "$LINODE_API_ERROR" ]; then
  filter='.data[] | @text
  "\(.label)\t\(.id)\t\(.ipv4[0])\t\(.ipv6 | sub("/.+$"; ""))\t\(.region)\t\(.status)"'
  "$JQ_EXEC" -r "$filter" "$tmp" |
    column -t -s "$(printf '\t')" -N Label,ID,IPv4,IPv6,Region,Status -o ' | '
  exit 0
else
  echo >&2 "Error: $LINODE_API_ERROR"
  exit 1
fi
