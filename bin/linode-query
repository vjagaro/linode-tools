#!/bin/sh

set -eu

PROGRAM=linode-query
LINODE_LABEL=
LINODE_API_TOKEN="${LINODE_API_TOKEN:-}"
OUTPUT_PATH=
QUIET=
JQ_EXEC="${JQ_EXEC:-jq}"
LINODE_API_EXEC="${LINODE_API_EXEC:-linode-api}"

usage() {
  cat <<EOF
Usage: $PROGRAM [OPTIONS] LABEL

Query Linode instance.

Arguments:
  LABEL                    Instance label (required)

Options:
  -k, --api-token=TOKEN    API token (required)
  -o, --output=FILE        Write output as shell variables to FILE
  -q, --quiet              Suppress output
  -h, --help               This help text

Enviroment variables:
  LINODE_API_TOKEN         See --token
  CURL_EXEC                Path to curl
  JQ_EXEC                  Path to jq
  LINODE_API_EXEC          Path to linode-api
EOF
}

error() {
  [ $# -gt 0 ] && echo >&2 "$PROGRAM:" "$@"
  echo >&2 "Try '$PROGRAM --help' for more information."
  exit 1
}

jq() {
  command "$JQ_EXEC" "$@"
}

linode_api() {
  command "$LINODE_API_EXEC" "$@"
}

out() {
  [ -n "$QUIET" ] || echo "$@"
}

opts="$(
  getopt -n "$PROGRAM" -o k:o:qh \
    -l api-token:,output:,quiet,help -- "$@"
)" || error
# shellcheck disable=SC2086
eval set -- $opts

while [ $# -gt 0 ]; do
  ARG="$1"
  shift
  case "$ARG" in
  -k | --api-token)
    LINODE_API_TOKEN="$1"
    shift
    ;;
  -o | --output)
    OUTPUT_PATH="$1"
    shift
    ;;
  -q | --quiet)
    QUIET=1
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  --)
    if [ $# -eq 1 ]; then
      LINODE_LABEL="$1"
      shift
    elif [ $# -gt 1 ]; then
      error "unexpected argument '$2'"
    fi
    ;;
  *)
    error "unexpected option '$ARG'"
    ;;
  esac
done

[ -z "$LINODE_LABEL" ] && error "missing LABEL"
[ -z "$LINODE_API_TOKEN" ] && error "missing --api-token=TOKEN"

which "$JQ_EXEC" >/dev/null || error "jq not found"
which "$LINODE_API_EXEC" >/dev/null || error "linode-api not found"

if [ "$OUTPUT_PATH" = - ]; then
  OUTPUT_PATH=/dev/stdout
  QUIET=1
fi

export LINODE_API_TOKEN

out -n "Querying instance $LINODE_LABEL..."

linode_filter="$(jq -cn --arg label_ "$LINODE_LABEL" '{ "label": $label_ }')"

json="$(linode_api -f "$linode_filter" /linode/instances)"

# shellcheck disable=SC2016
query_filter='@sh "LINODE_API_OK=\(
  if .errors[0].reason then "" else "1" end)
LINODE_API_ERROR=\(.errors[0].reason // "")
LINODE_LABEL=\(.data[0].label // $label_)
LINODE_ID=\(.data[0].id // "")
LINODE_STATUS=\(.data[0].status // "")
LINODE_IPV4=\(.data[0].ipv4[0] // "")
LINODE_IPV6=\(.data[0].ipv6 // "" | sub("/.+$"; ""))
LINODE_IMAGE=\(.data[0].image // "")
LINODE_REGION=\(.data[0].region // "")
LINODE_TYPE=\(.data[0].type // "")"'

output="$(echo "$json" | jq -r --arg label_ "$LINODE_LABEL" "$query_filter")"

eval "$output"

if [ -z "$LINODE_API_OK" ]; then
  out error
  out "Error: $LINODE_API_ERROR"
  exitcode=1
elif [ -z "$LINODE_ID" ]; then
  out not found
  output="$(echo "$output" |
    sed "s/^LINODE_API_OK.*\$/LINODE_API_OK=''/" |
    sed "s/^LINODE_API_ERROR.*\$/LINODE_API_ERROR='Not found'/")"
  exitcode=1
else
  out ok
  out
  out " Label: $LINODE_LABEL"
  out "    ID: $LINODE_ID"
  out "Status: $LINODE_STATUS"
  out "  IPv4: $LINODE_IPV4"
  out "  IPv6: $LINODE_IPV6"
  out "Region: $LINODE_REGION"
  out " Image: $LINODE_IMAGE"
  out "  Type: $LINODE_TYPE"
  exitcode=0
fi

[ -n "$OUTPUT_PATH" ] && echo "$output" >"$OUTPUT_PATH"

exit $exitcode
